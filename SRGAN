{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":588358,"sourceType":"datasetVersion","datasetId":286056}],"dockerImageVersionId":30627,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\n\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\" \n\nphysical_devices = tf.config.list_physical_devices('GPU')\nif physical_devices:\n    tf.config.experimental.set_memory_growth(physical_devices[0], True)\n    print(f\"Using GPU: {physical_devices[0]}\")\nelse:\n    print(\"No GPU found. Using CPU.\")\n\ntf.random.set_seed(42)\nnp.random.seed(42)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-04T06:57:42.732006Z","iopub.execute_input":"2025-04-04T06:57:42.732640Z","iopub.status.idle":"2025-04-04T06:57:42.819340Z","shell.execute_reply.started":"2025-04-04T06:57:42.732609Z","shell.execute_reply":"2025-04-04T06:57:42.818433Z"}},"outputs":[{"name":"stdout","text":"Using GPU: PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"class SRGANConfig:\n    def __init__(self):\n        # Dataset parameters\n        self.dataset_name = \"DIV2K\"\n        self.data_dir = \"../input/div2k-dataset/DIV2K_train_HR/DIV2K_train_HR\"\n        self.val_dir = \"../input/div2k-dataset/DIV2K_valid_HR/DIV2K_valid_HR\"\n        self.hr_height = 256\n        self.hr_width = 256\n        self.scale_factor = 4\n        self.lr_height = self.hr_height // self.scale_factor\n        self.lr_width = self.hr_width // self.scale_factor\n\n        # Training parameters\n        self.epochs = 200\n        self.batch_size = 16\n        self.gen_lr = 1e-4\n        self.disc_lr = 1e-4\n        self.beta1 = 0.5\n\n        # Model parameters\n        self.gen_filters = 64\n        self.disc_filters = 64\n        self.num_res_blocks = 16\n\n        # Loss weights\n        self.content_weight = 1.0\n        self.adversarial_weight = 1e-3\n\n        self.checkpoint_dir = \"checkpoints\"\n        self.sample_dir = \"samples\"\n\n        os.makedirs(self.checkpoint_dir)\n        os.makedirs(self.sample_dir)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-04T06:57:45.450213Z","iopub.execute_input":"2025-04-04T06:57:45.450807Z","iopub.status.idle":"2025-04-04T06:57:45.457366Z","shell.execute_reply.started":"2025-04-04T06:57:45.450775Z","shell.execute_reply":"2025-04-04T06:57:45.456485Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"class DataLoader:\n    def __init__(self, config):\n        self.config = config\n\n    def _verify_paths(self):\n        # Check if the training and validation directories exist\n        if not tf.io.gfile.exists(self.config.data_dir):\n            raise ValueError(f\"Training directory {self.config.data_dir} does not exist\")\n        if not tf.io.gfile.exists(self.config.val_dir):\n            raise ValueError(f\"Validation directory {self.config.val_dir} does not exist\")\n        # Verify that there are PNG files in the directories\n        train_files = tf.io.gfile.glob(os.path.join(self.config.data_dir, \"*.png\"))\n        val_files = tf.io.gfile.glob(os.path.join(self.config.val_dir, \"*.png\"))\n        if not train_files:\n            raise ValueError(f\"No PNG files found in {self.config.data_dir}\")\n        if not val_files:\n            raise ValueError(f\"No PNG files found in {self.config.val_dir}\")\n        return len(train_files), len(val_files)\n\n    def load_and_preprocess(self, image_path):\n        # Read and decode the image\n        img = tf.io.read_file(image_path)\n        img = tf.image.decode_png(img, channels=3)\n        # Random crop to HR size and normalize\n        img = tf.image.random_crop(img, [self.config.hr_height, self.config.hr_width, 3])\n        img = tf.cast(img, tf.float32) / 255.0\n        # Create a low-resolution version using bicubic interpolation\n        lr_img = tf.image.resize(img, [self.config.lr_height, self.config.lr_width], method='bicubic')\n        return lr_img, img\n\n    def create_dataset(self, is_training=True):\n        # Verify paths and count images\n        train_count, val_count = self._verify_paths()\n        # Choose the correct directory based on training/validation mode\n        if is_training:\n            files = tf.data.Dataset.list_files(os.path.join(self.config.data_dir, \"*.png\"), shuffle=True)\n            print(f\"Found {train_count} training images\")\n        else:\n            files = tf.data.Dataset.list_files(os.path.join(self.config.val_dir, \"*.png\"), shuffle=False)\n            print(f\"Found {val_count} validation images\")\n        # Map the loading and preprocessing function over the files\n        dataset = files.map(self.load_and_preprocess, num_parallel_calls=tf.data.AUTOTUNE)\n        # Batch and prefetch the dataset for performance\n        dataset = dataset.batch(self.config.batch_size)\n        dataset = dataset.prefetch(tf.data.AUTOTUNE)\n        return dataset\n\nconfig = SRGANConfig()\ndata_loader = DataLoader(config)\ntrain_dataset = data_loader.create_dataset(is_training=True)\nval_dataset = data_loader.create_dataset(is_training=False)\n\nfor lr_imgs, hr_imgs in train_dataset.take(1):\n    print(\"LR batch shape:\", lr_imgs.shape)\n    print(\"HR batch shape:\", hr_imgs.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-04T06:57:47.659404Z","iopub.execute_input":"2025-04-04T06:57:47.659779Z","iopub.status.idle":"2025-04-04T06:57:48.669158Z","shell.execute_reply.started":"2025-04-04T06:57:47.659752Z","shell.execute_reply":"2025-04-04T06:57:48.668481Z"}},"outputs":[{"name":"stdout","text":"Found 800 training images\nFound 100 validation images\nLR batch shape: (16, 64, 64, 3)\nHR batch shape: (16, 256, 256, 3)\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"\n\ndef residual_block(x, filters):\n    shortcut = x\n    x = layers.Conv2D(filters, 3, padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.PReLU(shared_axes=[1, 2])(x)\n    x = layers.Conv2D(filters, 3, padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Add()([shortcut, x])\n    return x\n\ndef upsample_block(x, filters):\n    x = layers.Conv2D(filters * 4, 3, padding='same')(x)\n    x = layers.Lambda(lambda x: tf.nn.depth_to_space(x, 2))(x)\n    x = layers.PReLU(shared_axes=[1, 2])(x)\n    return x\n\ndef build_generator(config):\n    inputs = layers.Input(shape=(config.lr_height, config.lr_width, 3))\n    x = layers.Conv2D(64, 9, padding='same')(inputs)\n    x = layers.PReLU(shared_axes=[1, 2])(x)\n\n    shortcut = x\n\n    for _ in range(16):\n        x = residual_block(x, 64)\n\n    x = layers.Conv2D(64, 3, padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Add()([shortcut, x])\n\n    for _ in range(2):\n        x = upsample_block(x, 64)\n\n    outputs = layers.Conv2D(3, 9, padding='same', activation='tanh')(x)\n\n    return keras.Model(inputs, outputs)\n\ngenerator = build_generator(config)\ngenerator.summary()\n\n\ndef build_discriminator(config):\n    inputs = layers.Input(shape=(config.hr_height, config.hr_width, 3))\n    \n    # Initial convolutional layer\n    x = layers.Conv2D(64, kernel_size=3, strides=1, padding=\"same\")(inputs)\n    x = layers.LeakyReLU(alpha=0.2)(x)\n    \n    # Series of convolutional blocks with increasing filters\n    for i in range(4):\n        filters = min(64 * (2 ** i), 512)\n        strides = 1 if i % 2 else 2       # Alternate strides between 1 and 2\n        x = layers.Conv2D(filters=filters,\n                          kernel_size=3,\n                          strides=strides,\n                          padding=\"same\")(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.LeakyReLU(alpha=0.2)(x)\n    \n    # Fully connected layer for classification\n    x = layers.GlobalAveragePooling2D()(x)\n    x = layers.Dense(1024)(x)\n    x = layers.LeakyReLU(alpha=0.2)(x)\n    \n    outputs = layers.Dense(1, activation=\"sigmoid\")(x)\n    \n    return keras.Model(inputs, outputs)\n\ndiscriminator = build_discriminator(config)\ndiscriminator.summary()\n\ncontent_loss = keras.losses.MeanSquaredError()\nadversarial_loss = keras.losses.BinaryCrossentropy()\n\ngen_optimizer = keras.optimizers.Adam(learning_rate=config.gen_lr, beta_1=config.beta1)\ndisc_optimizer = keras.optimizers.Adam(learning_rate=config.disc_lr, beta_1=config.beta1)\n\nvgg = keras.applications.VGG19(include_top=False, weights='imagenet', input_shape=(config.hr_height, config.hr_width, 3))\nvgg.trainable = False\ncontent_model = keras.Model(vgg.input, vgg.get_layer('block5_conv2').output)\n\ngen_optimizer = keras.optimizers.Adam(learning_rate=1e-4)\ndisc_optimizer = keras.optimizers.Adam(learning_rate=1e-4)\n\nbce = keras.losses.BinaryCrossentropy()\nmse = keras.losses.MeanSquaredError()\n\ndef content_loss(hr, sr):\n    hr_features = content_model(hr)\n    sr_features = content_model(sr)\n    return mse(hr_features, sr_features)\n\ndef generator_loss(sr_out, hr, sr_validity):\n    con_loss = content_loss(hr, sr_out)\n    adv_loss = bce(tf.ones_like(sr_validity), sr_validity)\n    return con_loss + 1e-3 * adv_loss\n\ndef discriminator_loss(hr_validity, sr_validity):\n    real_loss = bce(tf.ones_like(hr_validity), hr_validity)\n    fake_loss = bce(tf.zeros_like(sr_validity), sr_validity)\n    return 0.5 * (real_loss + fake_loss)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-04T06:57:51.333295Z","iopub.execute_input":"2025-04-04T06:57:51.334165Z","iopub.status.idle":"2025-04-04T06:57:53.002885Z","shell.execute_reply.started":"2025-04-04T06:57:51.334130Z","shell.execute_reply":"2025-04-04T06:57:53.001926Z"}},"outputs":[{"name":"stdout","text":"Model: \"model_3\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_4 (InputLayer)        [(None, 64, 64, 3)]          0         []                            \n                                                                                                  \n conv2d_42 (Conv2D)          (None, 64, 64, 64)           15616     ['input_4[0][0]']             \n                                                                                                  \n p_re_lu_19 (PReLU)          (None, 64, 64, 64)           64        ['conv2d_42[0][0]']           \n                                                                                                  \n conv2d_43 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_19[0][0]']          \n                                                                                                  \n batch_normalization_37 (Ba  (None, 64, 64, 64)           256       ['conv2d_43[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_20 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_37[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_44 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_20[0][0]']          \n                                                                                                  \n batch_normalization_38 (Ba  (None, 64, 64, 64)           256       ['conv2d_44[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_17 (Add)                (None, 64, 64, 64)           0         ['p_re_lu_19[0][0]',          \n                                                                     'batch_normalization_38[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_45 (Conv2D)          (None, 64, 64, 64)           36928     ['add_17[0][0]']              \n                                                                                                  \n batch_normalization_39 (Ba  (None, 64, 64, 64)           256       ['conv2d_45[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_21 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_39[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_46 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_21[0][0]']          \n                                                                                                  \n batch_normalization_40 (Ba  (None, 64, 64, 64)           256       ['conv2d_46[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_18 (Add)                (None, 64, 64, 64)           0         ['add_17[0][0]',              \n                                                                     'batch_normalization_40[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_47 (Conv2D)          (None, 64, 64, 64)           36928     ['add_18[0][0]']              \n                                                                                                  \n batch_normalization_41 (Ba  (None, 64, 64, 64)           256       ['conv2d_47[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_22 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_41[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_48 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_22[0][0]']          \n                                                                                                  \n batch_normalization_42 (Ba  (None, 64, 64, 64)           256       ['conv2d_48[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_19 (Add)                (None, 64, 64, 64)           0         ['add_18[0][0]',              \n                                                                     'batch_normalization_42[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_49 (Conv2D)          (None, 64, 64, 64)           36928     ['add_19[0][0]']              \n                                                                                                  \n batch_normalization_43 (Ba  (None, 64, 64, 64)           256       ['conv2d_49[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_23 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_43[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_50 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_23[0][0]']          \n                                                                                                  \n batch_normalization_44 (Ba  (None, 64, 64, 64)           256       ['conv2d_50[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_20 (Add)                (None, 64, 64, 64)           0         ['add_19[0][0]',              \n                                                                     'batch_normalization_44[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_51 (Conv2D)          (None, 64, 64, 64)           36928     ['add_20[0][0]']              \n                                                                                                  \n batch_normalization_45 (Ba  (None, 64, 64, 64)           256       ['conv2d_51[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_24 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_45[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_52 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_24[0][0]']          \n                                                                                                  \n batch_normalization_46 (Ba  (None, 64, 64, 64)           256       ['conv2d_52[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_21 (Add)                (None, 64, 64, 64)           0         ['add_20[0][0]',              \n                                                                     'batch_normalization_46[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_53 (Conv2D)          (None, 64, 64, 64)           36928     ['add_21[0][0]']              \n                                                                                                  \n batch_normalization_47 (Ba  (None, 64, 64, 64)           256       ['conv2d_53[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_25 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_47[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_54 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_25[0][0]']          \n                                                                                                  \n batch_normalization_48 (Ba  (None, 64, 64, 64)           256       ['conv2d_54[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_22 (Add)                (None, 64, 64, 64)           0         ['add_21[0][0]',              \n                                                                     'batch_normalization_48[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_55 (Conv2D)          (None, 64, 64, 64)           36928     ['add_22[0][0]']              \n                                                                                                  \n batch_normalization_49 (Ba  (None, 64, 64, 64)           256       ['conv2d_55[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_26 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_49[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_56 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_26[0][0]']          \n                                                                                                  \n batch_normalization_50 (Ba  (None, 64, 64, 64)           256       ['conv2d_56[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_23 (Add)                (None, 64, 64, 64)           0         ['add_22[0][0]',              \n                                                                     'batch_normalization_50[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_57 (Conv2D)          (None, 64, 64, 64)           36928     ['add_23[0][0]']              \n                                                                                                  \n batch_normalization_51 (Ba  (None, 64, 64, 64)           256       ['conv2d_57[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_27 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_51[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_58 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_27[0][0]']          \n                                                                                                  \n batch_normalization_52 (Ba  (None, 64, 64, 64)           256       ['conv2d_58[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_24 (Add)                (None, 64, 64, 64)           0         ['add_23[0][0]',              \n                                                                     'batch_normalization_52[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_59 (Conv2D)          (None, 64, 64, 64)           36928     ['add_24[0][0]']              \n                                                                                                  \n batch_normalization_53 (Ba  (None, 64, 64, 64)           256       ['conv2d_59[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_28 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_53[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_60 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_28[0][0]']          \n                                                                                                  \n batch_normalization_54 (Ba  (None, 64, 64, 64)           256       ['conv2d_60[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_25 (Add)                (None, 64, 64, 64)           0         ['add_24[0][0]',              \n                                                                     'batch_normalization_54[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_61 (Conv2D)          (None, 64, 64, 64)           36928     ['add_25[0][0]']              \n                                                                                                  \n batch_normalization_55 (Ba  (None, 64, 64, 64)           256       ['conv2d_61[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_29 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_55[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_62 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_29[0][0]']          \n                                                                                                  \n batch_normalization_56 (Ba  (None, 64, 64, 64)           256       ['conv2d_62[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_26 (Add)                (None, 64, 64, 64)           0         ['add_25[0][0]',              \n                                                                     'batch_normalization_56[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_63 (Conv2D)          (None, 64, 64, 64)           36928     ['add_26[0][0]']              \n                                                                                                  \n batch_normalization_57 (Ba  (None, 64, 64, 64)           256       ['conv2d_63[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_30 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_57[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_64 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_30[0][0]']          \n                                                                                                  \n batch_normalization_58 (Ba  (None, 64, 64, 64)           256       ['conv2d_64[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_27 (Add)                (None, 64, 64, 64)           0         ['add_26[0][0]',              \n                                                                     'batch_normalization_58[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_65 (Conv2D)          (None, 64, 64, 64)           36928     ['add_27[0][0]']              \n                                                                                                  \n batch_normalization_59 (Ba  (None, 64, 64, 64)           256       ['conv2d_65[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_31 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_59[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_66 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_31[0][0]']          \n                                                                                                  \n batch_normalization_60 (Ba  (None, 64, 64, 64)           256       ['conv2d_66[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_28 (Add)                (None, 64, 64, 64)           0         ['add_27[0][0]',              \n                                                                     'batch_normalization_60[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_67 (Conv2D)          (None, 64, 64, 64)           36928     ['add_28[0][0]']              \n                                                                                                  \n batch_normalization_61 (Ba  (None, 64, 64, 64)           256       ['conv2d_67[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_32 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_61[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_68 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_32[0][0]']          \n                                                                                                  \n batch_normalization_62 (Ba  (None, 64, 64, 64)           256       ['conv2d_68[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_29 (Add)                (None, 64, 64, 64)           0         ['add_28[0][0]',              \n                                                                     'batch_normalization_62[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_69 (Conv2D)          (None, 64, 64, 64)           36928     ['add_29[0][0]']              \n                                                                                                  \n batch_normalization_63 (Ba  (None, 64, 64, 64)           256       ['conv2d_69[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_33 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_63[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_70 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_33[0][0]']          \n                                                                                                  \n batch_normalization_64 (Ba  (None, 64, 64, 64)           256       ['conv2d_70[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_30 (Add)                (None, 64, 64, 64)           0         ['add_29[0][0]',              \n                                                                     'batch_normalization_64[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_71 (Conv2D)          (None, 64, 64, 64)           36928     ['add_30[0][0]']              \n                                                                                                  \n batch_normalization_65 (Ba  (None, 64, 64, 64)           256       ['conv2d_71[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_34 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_65[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_72 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_34[0][0]']          \n                                                                                                  \n batch_normalization_66 (Ba  (None, 64, 64, 64)           256       ['conv2d_72[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_31 (Add)                (None, 64, 64, 64)           0         ['add_30[0][0]',              \n                                                                     'batch_normalization_66[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_73 (Conv2D)          (None, 64, 64, 64)           36928     ['add_31[0][0]']              \n                                                                                                  \n batch_normalization_67 (Ba  (None, 64, 64, 64)           256       ['conv2d_73[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n p_re_lu_35 (PReLU)          (None, 64, 64, 64)           64        ['batch_normalization_67[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_74 (Conv2D)          (None, 64, 64, 64)           36928     ['p_re_lu_35[0][0]']          \n                                                                                                  \n batch_normalization_68 (Ba  (None, 64, 64, 64)           256       ['conv2d_74[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_32 (Add)                (None, 64, 64, 64)           0         ['add_31[0][0]',              \n                                                                     'batch_normalization_68[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_75 (Conv2D)          (None, 64, 64, 64)           36928     ['add_32[0][0]']              \n                                                                                                  \n batch_normalization_69 (Ba  (None, 64, 64, 64)           256       ['conv2d_75[0][0]']           \n tchNormalization)                                                                                \n                                                                                                  \n add_33 (Add)                (None, 64, 64, 64)           0         ['p_re_lu_19[0][0]',          \n                                                                     'batch_normalization_69[0][0]\n                                                                    ']                            \n                                                                                                  \n conv2d_76 (Conv2D)          (None, 64, 64, 256)          147712    ['add_33[0][0]']              \n                                                                                                  \n lambda_2 (Lambda)           (None, 128, 128, 64)         0         ['conv2d_76[0][0]']           \n                                                                                                  \n p_re_lu_36 (PReLU)          (None, 128, 128, 64)         64        ['lambda_2[0][0]']            \n                                                                                                  \n conv2d_77 (Conv2D)          (None, 128, 128, 256)        147712    ['p_re_lu_36[0][0]']          \n                                                                                                  \n lambda_3 (Lambda)           (None, 256, 256, 64)         0         ['conv2d_77[0][0]']           \n                                                                                                  \n p_re_lu_37 (PReLU)          (None, 256, 256, 64)         64        ['lambda_3[0][0]']            \n                                                                                                  \n conv2d_78 (Conv2D)          (None, 256, 256, 3)          15555     ['p_re_lu_37[0][0]']          \n                                                                                                  \n==================================================================================================\nTotal params: 1554883 (5.93 MB)\nTrainable params: 1550659 (5.92 MB)\nNon-trainable params: 4224 (16.50 KB)\n__________________________________________________________________________________________________\nModel: \"model_4\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_5 (InputLayer)        [(None, 256, 256, 3)]     0         \n                                                                 \n conv2d_79 (Conv2D)          (None, 256, 256, 64)      1792      \n                                                                 \n leaky_re_lu_6 (LeakyReLU)   (None, 256, 256, 64)      0         \n                                                                 \n conv2d_80 (Conv2D)          (None, 128, 128, 64)      36928     \n                                                                 \n batch_normalization_70 (Ba  (None, 128, 128, 64)      256       \n tchNormalization)                                               \n                                                                 \n leaky_re_lu_7 (LeakyReLU)   (None, 128, 128, 64)      0         \n                                                                 \n conv2d_81 (Conv2D)          (None, 128, 128, 128)     73856     \n                                                                 \n batch_normalization_71 (Ba  (None, 128, 128, 128)     512       \n tchNormalization)                                               \n                                                                 \n leaky_re_lu_8 (LeakyReLU)   (None, 128, 128, 128)     0         \n                                                                 \n conv2d_82 (Conv2D)          (None, 64, 64, 256)       295168    \n                                                                 \n batch_normalization_72 (Ba  (None, 64, 64, 256)       1024      \n tchNormalization)                                               \n                                                                 \n leaky_re_lu_9 (LeakyReLU)   (None, 64, 64, 256)       0         \n                                                                 \n conv2d_83 (Conv2D)          (None, 64, 64, 512)       1180160   \n                                                                 \n batch_normalization_73 (Ba  (None, 64, 64, 512)       2048      \n tchNormalization)                                               \n                                                                 \n leaky_re_lu_10 (LeakyReLU)  (None, 64, 64, 512)       0         \n                                                                 \n global_average_pooling2d_1  (None, 512)               0         \n  (GlobalAveragePooling2D)                                       \n                                                                 \n dense_2 (Dense)             (None, 1024)              525312    \n                                                                 \n leaky_re_lu_11 (LeakyReLU)  (None, 1024)              0         \n                                                                 \n dense_3 (Dense)             (None, 1)                 1025      \n                                                                 \n=================================================================\nTotal params: 2118081 (8.08 MB)\nTrainable params: 2116161 (8.07 MB)\nNon-trainable params: 1920 (7.50 KB)\n_________________________________________________________________\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"\n\nfixed_val_image = None\nfor lr, hr in val_dataset.take(1):\n    fixed_val_image = (lr[0], hr[0])\n    break\n\ndef generate_and_save_fixed_image(model, epoch):\n\n    lr_image, hr_image = fixed_val_image  # Fixed image from validation set.\n    lr_image_batch = tf.expand_dims(lr_image, 0)\n    sr_image = model(lr_image_batch, training=False)\n    sr_image = tf.clip_by_value(sr_image, 0, 1)\n    \n    # Compute PSNR for the fixed image.\n    psnr_val = tf.image.psnr(tf.expand_dims(hr_image, 0), sr_image, max_val=1.0)\n    psnr_value = float(psnr_val.numpy())  # Convert to Python float for formatting.\n    \n    # Prepare images for display.\n    display_list = [lr_image, tf.squeeze(sr_image), hr_image]\n    titles = ['Low Resolution', f'Super Resolution\\nPSNR: {psnr_value:.2f}', 'High Resolution']\n    \n    # Create composite figure.\n    fig, axes = plt.subplots(1, 3, figsize=(15, 8))\n    for i, ax in enumerate(axes):\n        ax.set_title(titles[i])\n        ax.imshow(display_list[i].numpy())\n        ax.axis('off')\n    plt.tight_layout()\n    \n    # Save composite image.\n    fixed_path = os.path.join(config.sample_dir, f'fixed_image_epoch_{epoch:04d}.png')\n    plt.savefig(fixed_path)\n    print(f\"Saved fixed composite image at: {fixed_path} (PSNR: {psnr_value:.2f})\")\n    \n    # Display inline.\n    plt.show()\n    plt.close(fig)\n\n@tf.function\ndef train_step(lr_images, hr_images):\n    # Ensure inputs are within [0, 1].\n    lr_images = tf.clip_by_value(lr_images, 0, 1)\n    hr_images = tf.clip_by_value(hr_images, 0, 1)\n    \n    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n        # Generate SR images.\n        sr_images = generator(lr_images, training=True)\n        sr_images = tf.clip_by_value(sr_images, 0, 1)\n        \n        # Discriminator outputs.\n        hr_validity = discriminator(hr_images, training=True)\n        sr_validity = discriminator(sr_images, training=True)\n        \n        # Compute VGG features for perceptual loss.\n        sr_vgg_features = content_model(sr_images)\n        hr_vgg_features = content_model(hr_images)\n        \n        # Compute losses.\n        pixel_loss = mse(hr_images, sr_images)\n        perceptual_loss = mse(hr_vgg_features, sr_vgg_features)\n        content_l = pixel_loss + 0.006 * perceptual_loss\n        \n!zip -r output_folder.zip output_folder\n        adversarial_l = bce(tf.ones_like(sr_validity), sr_validity)\n        !zip -r output_folder.zip output_folder\ngen_loss = content_l + 1e-3 * adversarial_l\n        \n        real_loss = bce(tf.ones_like(hr_validity), hr_validity)\n        fake_loss = bce(tf.zeros_like(sr_validity), sr_validity)\n        disc_loss = 0.5 * (real_loss + fake_loss)\n    \n    # Compute and clip gradients.\n    gen_gradients = gen_tape.gradient(gen_loss, generator.trainable_variables)\n    disc_gradients = disc_tape.gradient(disc_loss, discriminator.trainable_variables)\n    gen_gradients = [tf.clip_by_norm(g, 1.0) for g in gen_gradients if g is not None]\n    disc_gradients = [tf.clip_by_norm(g, 1.0) for g in disc_gradients if g is not None]\n    \n    gen_optimizer.apply_gradients(zip(gen_gradients, generator.trainable_variables))\n    disc_optimizer.apply_gradients(zip(disc_gradients, discriminator.trainable_variables))\n    \n    return content_l, adversarial_l, disc_loss\n\ndef train(dataset, val_dataset, epochs, display_interval):\n    log_file = os.path.join(config.sample_dir, 'training_log.csv')\n    with open(log_file, 'w') as f:\n        f.write('epoch,content_loss,adversarial_loss,disc_loss,psnr\\n')\n    \n    best_psnr = 0\n    for epoch in range(epochs):\n        print(f\"\\nEpoch {epoch+1}/{epochs}\")\n        # training progress\n        pbar = tqdm(total=len(dataset), desc=f\"Epoch {epoch+1}\")\n        epoch_content_loss = []\n        epoch_adv_loss = []\n        epoch_disc_loss = []\n        \n        for lr_images, hr_images in dataset:\n            content_l, adv_l, disc_l = train_step(lr_images, hr_images)\n            epoch_content_loss.append(float(content_l))\n            epoch_adv_loss.append(float(adv_l))\n            epoch_disc_loss.append(float(disc_l))\n            pbar.update(1)\n        pbar.close()\n        \n        # Compute average losses.\n        avg_content_loss = sum(epoch_content_loss) / len(epoch_content_loss)\n        avg_adv_loss = sum(epoch_adv_loss) / len(epoch_adv_loss)\n        avg_disc_loss = sum(epoch_disc_loss) / len(epoch_disc_loss)\n        \n        # Evaluate PSNR using 5 batches from the validation set.\n        psnr_values = []\n        for val_lr, val_hr in val_dataset.take(5):\n            val_sr = generator(val_lr, training=False)\n            batch_psnr = tf.reduce_mean(tf.image.psnr(val_hr, val_sr, max_val=1.0))\n            psnr_values.append(float(batch_psnr))\n        avg_psnr = sum(psnr_values) / len(psnr_values)\n        print(f\"Validation PSNR: {avg_psnr:.2f}\")\n        \n        if avg_psnr > best_psnr:\n            best_psnr = avg_psnr\n            generator.save_weights(os.path.join(config.checkpoint_dir, 'generator_best.h5'))\n            print(f\"New best PSNR: {best_psnr:.2f}, saved model\")\n        \n        # Every 'display_interval' epochs, use the fixed validation image.\n        if (epoch+1) % display_interval == 0:\n            generate_and_save_fixed_image(generator, epoch+1)\n        \n        with open(log_file, 'a') as f:\n            f.write(f\"{epoch+1},{avg_content_loss},{avg_adv_loss},{avg_disc_loss},{avg_psnr}\\n\")\n        \n        print(f\"Epoch {epoch+1} summary:\")\n        print(f\"  Content Loss: {avg_content_loss:.6f}\")\n        print(f\"  Adversarial Loss: {avg_adv_loss:.6f}\")\n        print(f\"  Discriminator Loss: {avg_disc_loss:.6f}\")\n\n\ntrain(train_dataset, val_dataset, config.epochs, display_interval)","metadata":{"execution":{"iopub.status.busy":"2025-04-04T07:13:18.420124Z","iopub.execute_input":"2025-04-04T07:13:18.420446Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}